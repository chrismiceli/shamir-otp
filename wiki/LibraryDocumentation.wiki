#summary Documentation of the C Library.

= Introduction =
This is the documentation generated by doxygen and can be built using the source code by calling 'make'.

<wiki:toc />

= Details =

== Data Structures ==
struct  	profile_t
struct  	verification_t
struct  	update_t

== Enumerations ==
enum  	role_t { SHAMIR_GENERATOR, SHAMIR_AUTHENTICATOR }

== Functions ==
      * void  print_profile (const profile_t profile)
      * int   load_profile (profile_t `*`profile, const char `*`filename)
      * int   save_profile (const profile_t profile, const char `*`filename)
      * int   check_otp (const profile_t profile, const mpz_t otp)
      * void  get_otp (mpz_t rop, const profile_t profile)
      * void  create_authenticator_profile (profile_t `*`authenticator_profile, const profile_t generator_profile)
      * void  create_generator_profile (profile_t `*`generator_profile, const long security_bits)
      * void  generate_update_material (const profile_t profile, update_t `*`update)
      * void  update_profile (profile_t `*`profile, const mpz_t authenticator_material, const mpz_t generator_material)
      * int   verify_update_material (const profile_t profile, const verification_t verification, const mpz_t update_material)
      * void  generate_verification_material (const profile_t profile, verification_t `*`verification, const update_t update)


== Enumeration Type Documentation ==
=== enum role_t ===

The type of a participant in the Shamir one-time password scheme.

Enumerator:
    SHAMIR_GENERATOR

    The generator of the password.
    SHAMIR_AUTHENTICATOR

    The authenticator of the password.

== Function Documentation ==
=== int check_otp(const profile_t profile, const mpz_t otp) ===

Check a one-time password to authenticate the user who provided this password.

Parameters:
      * profile:  Current profile to check the password against. This is the authenticator's profile that is associated with the generator's profile.
      * otp:   Shamir one-time password to check.

Returns:
    0 if the password is valid, -1 otherwise.

=== void create_authenticator_profile (profile_t `*` authenticator_profile, const profile_t generator_profile) ===

Generates a profile for an authenticator.

Create a profile for an authenticator from a generator_profile and store it in authenticator_profile.

Parameters:
      * authenticator_profile:   Used to store the profile created from generator_profile.
      * generator_profile:    Used to create a profile for the authenticator.

=== void create_generator_profile(profile_t `*` generator_profile, const long security_bits) ===

Generates a profile for the generator (client).

Create a profile for a generator (client desiring future authentication) that has security_bits of security.

Parameters:
      * generator_profile: Used to store the created generator profile.
      * security_bits: The number of bits of security provided.

=== void generate_update_material (const profile_t profile, update_t `*`update) ===

Create update material.

Create material that is used by update_profile to update a profile to have the next valid Shamir one-time password.

Parameters:
      * profile: Profile of the party creating the update material.
      * update: Used to store the resulting update material that can be used to update the password via update_profile.

=== void generate_verification_material (const profile_t profile, verification_t `*`verification, const update_t update) ===

Generates material to be utilized to verify update material.

Populate verification with information for the other participating party associated with this profile.

Parameters:
      * profile: The profile of the one-time password currently in question.
      * verification: Structure to be populated with information to be utilized by the other participating member.
      * update: The update material that is going to be verified by the other party.

=== void get_otp (mpz_t rop, const profile_t profile) ===

Gets the current Shamir one-time password for the generator's profile.

Parameters:
      * rop: Used to store the Shamir one-time password extracted from profile.
      * profile: Profile used to extract the Shamir one-time password form.

=== int load_profile(profile_t `*`profile, const char `*`filename) ===

Load a profile from disk.

Loads the Shamir one-time password profile from the file specified at filename into a profile.

Parameters:
      * profile: Used to store the loaded profile.
      * filename: Name of the file to load the profile from.

Returns:
    0 if successful, -1 otherwise. errno is set appropriately

=== void print_profile(const profile_t profile) ===

Prints a profile to standard out.

Parameters:
      * profile: Profile to be printed

=== int save_profile(const profile_t profile, const char `*`filename) ===

Save a profile to disk.

Saves the Shamir one-time password profile specified at filename to the file on disk specified at filename.

Parameters:
      * profile: Profile written to disk.
      * filename: Name of the file to write the profile to.

Returns:
    0 if successful, -1 otherwise. errno is set appropriately

=== void update_profile(profile_t `*`profile, const mpz_t authenticator_material, const mpz_t generator_material) ===

Updates a profile to be ready for the next Shamir one-time password

Use material created via generate_update_material to update the provided profile.

Parameters:
      * profile: The profile to be updated in preparation for the next Shamir one-time password.
      * authenticator_material: Material created by the authenticator from generate_update_material.
      * generator_material: Material created by the generator from generate_update_material.

=== int verify_update_material(const profile_t profile, const verification_t verification, const mpz_t update_material) ===

Verifies whether update material is corrupt or malicious.

Verifies whether the update material update_material is valid in the given profile context with information provided by verification.

Parameters:
      * profile: The profile of the One-Time password that is desiring to be updated with the update material.
      * verification: Information provided by the other party used to determine the validity of the update_material.
      * update_material: The update material to be verified for authenticity.

Returns:
    0 for successful verification, -1 otherwise.